@page "/Board"
@using Core.Entity
@using ServiceClient
@rendermode InteractiveServer
@inject ColumnClientService ColumnService
@inject ToDoService TodoService

<div class="board-container">
    <EditForm Model="@newColumn" FormName="newColumn" OnValidSubmit="CreateColumn">
        <DataAnnotationsValidator />
        <div class="form-group">
            <InputText id="columnName" @bind-Value="newColumn.Name" placeholder="Enter column name" />
            <ValidationMessage For="@(() => newColumn.Name)" />
        </div>
        <button type="submit">Create</button>
    </EditForm>

    <div class="columns-container">
        @foreach (var column in columns)
        {
            <div class="column">
                <h3>@column.Name</h3>
                @if (column.Tasks != null)
                {
                    foreach (var task in column.Tasks)
                    {
                        <div class="task">
                            <p>@task.Name</p>
                            <p>@task.Description</p>
                        </div>
                    }
                }
                <button @onclick="() => EditColumn(column)">Edit</button>
                <button @onclick="() => DeleteColumn(column.Id)">Delete</button>
            </div>
        }
    </div>
</div>

@code {
    [SupplyParameterFromForm(FormName = "newColumn")]
    private Column newColumn { get; set; } = new();
    private IEnumerable<Column> columns = new List<Column>();

    protected override async Task OnInitializedAsync()
    {
        await LoadColumns();
    }

    private async Task LoadColumns()
    {
        try
        {
            columns = await ColumnService.GetAll();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading columns: {ex.Message}");
        }
    }

    private async Task CreateColumn()
    {
        try
        {
            await ColumnService.Create(newColumn);
            await LoadColumns();
            newColumn = new Column();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating column: {ex.Message}");
        }
    }

    private async Task EditColumn(Column column)
    {
        try
        {
            await ColumnService.Update(column);
            await LoadColumns();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error editing column: {ex.Message}");
        }
    }

    private async Task DeleteColumn(Guid id)
    {
        try
        {
            await ColumnService.Delete(id, CancellationToken.None);
            await LoadColumns();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting column: {ex.Message}");
        }
    }
}
